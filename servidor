import socket
import cv2
import numpy as np
import pygame
import threading
import time
import json

# ========= CONEXI√ìN A LA PICO-CAM =========
HOST = "0.0.0.0"
PORT = 9000

server = socket.socket()
server.bind((HOST, PORT))
server.listen(1)
print("üöÄ Esperando conexi√≥n de la Pico-CAM...")
conn, addr = server.accept()
print(f"‚úÖ Conectado desde {addr}")

# ========= INICIALIZAR CONTROL XBOX =========
pygame.init()
pygame.joystick.init()

joystick = pygame.joystick.Joystick(0)
joystick.init()
print(f"üéÆ Control conectado: {joystick.get_name()}")

# ========= FUNCI√ìN DE MAPEO =========
def mapear(valor, in_min, in_max, out_min, out_max):
    return max(min(out_max, ((valor - in_min) * (out_max - out_min) / (in_max - in_min) + out_min)), out_min)

# ========= VARIABLES DE BRAZO =========
ultimo_cmd = ""
angulo_base = 0
angulo_hombro = 45
angulo_codo = 45
ultimo_servo = {}

def controlar_con_joystick():
    global ultimo_cmd, angulo_base, angulo_hombro, angulo_codo, ultimo_servo
    while True:
        pygame.event.pump()

        # ==== MOVIMIENTO DEL CARRO ====
        eje_x = joystick.get_axis(0)  # Stick izquierdo horizontal
        eje_y = joystick.get_axis(1)  # Stick izquierdo vertical

        if eje_y < -0.5:
            cmd = "FWD"
        elif eje_y > 0.5:
            cmd = "BACK"
        elif eje_x < -0.5:
            cmd = "LEFT"
        elif eje_x > 0.5:
            cmd = "RIGHT"
        else:
            cmd = "STOP"

        if cmd != ultimo_cmd:
            try:
                conn.sendall((cmd + "\n").encode())
                print(f"üéÆ ‚Üí {cmd}")
                ultimo_cmd = cmd
            except Exception as e:
                print("‚ùå Error al enviar comando:", e)
                break

        # ==== CONTROL DEL BRAZO ====
        joy_rx = joystick.get_axis(2)  # Stick derecho horizontal ‚Üí BASE
        joy_ry = joystick.get_axis(3)  # Stick derecho vertical ‚Üí HOMBRO
        gatillo_lt = joystick.get_axis(4)  # LT
        gatillo_rt = joystick.get_axis(5)  # RT

        # Movimiento acumulativo de base
        if abs(joy_rx) > 0.2:
            angulo_base += int(joy_rx * 3)

        if abs(joy_ry) > 0.2:
            angulo_hombro += int(-joy_ry * 3)

        if gatillo_rt > 0.3:  # Presionado
            angulo_codo += 2
        elif gatillo_lt > 0.3:
            angulo_codo -= 2

        # Limitar rangos
        angulo_base = max(-90, min(90, angulo_base))
        angulo_hombro = max(0, min(90, angulo_hombro))
        angulo_codo = max(0, min(90, angulo_codo))

        # Enviar comando solo si cambi√≥
        servo_cmd = {"base": angulo_base, "hombro": angulo_hombro, "codo": angulo_codo}
        if servo_cmd != ultimo_servo:
            try:
                conn.sendall((json.dumps(servo_cmd) + "\n").encode())
                print(f"ü¶æ Servo ‚Üí {servo_cmd}")
                ultimo_servo = servo_cmd
            except Exception as e:
                print("‚ùå Error al enviar servo:", e)
                break

        time.sleep(0.05)

threading.Thread(target=controlar_con_joystick, daemon=True).start()

# ========= RECEPCI√ìN DE VIDEO =========
def rgb565_to_rgb888(rgb565_bytes):
    result = bytearray()
    for i in range(0, len(rgb565_bytes), 2):
        pixel = (rgb565_bytes[i] << 8) | rgb565_bytes[i+1]
        r = (pixel >> 11) & 0x1F
        g = (pixel >> 5) & 0x3F
        b = pixel & 0x1F
        r = (r << 3) | (r >> 2)
        g = (g << 2) | (g >> 4)
        b = (b << 3) | (b >> 2)
        result.extend([b, g, r])
    return np.frombuffer(result, dtype=np.uint8)

def receive_exact(sock, size):
    data = bytearray()
    while len(data) < size:
        packet = sock.recv(size - len(data))
        if not packet:
            return None
        data.extend(packet)
    return data

while True:
    size_data = receive_exact(conn, 4)
    if size_data is None:
        break
    size = int.from_bytes(size_data, 'big')

    header = receive_exact(conn, 4)
    if header is None:
        break
    width = int.from_bytes(header[0:2], 'big')
    height = int.from_bytes(header[2:4], 'big')

    img_data = receive_exact(conn, size)
    if img_data is None:
        break

    img_rgb = rgb565_to_rgb888(img_data)
    img_np = img_rgb.reshape((height, width, 3))
    cv2.imshow("üì∑ Pico-CAM Video", img_np)
    if cv2.waitKey(1) == 27:
        break

conn.close()
